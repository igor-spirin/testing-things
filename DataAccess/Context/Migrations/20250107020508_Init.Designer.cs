// <auto-generated />
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Context.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20250107020508_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.AccountDb", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.RefreshTokenDb", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("RefreshTokenDb");
                });

            modelBuilder.Entity("Models.AdminAccountDb", b =>
                {
                    b.HasBaseType("Models.AccountDb");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Models.CoreAccountDb", b =>
                {
                    b.HasBaseType("Models.AccountDb");

                    b.Property<long>("CoreId")
                        .HasColumnType("bigint");

                    b.HasIndex("CoreId")
                        .IsUnique();
                });

            modelBuilder.Entity("Models.CompanyAccountDb", b =>
                {
                    b.HasBaseType("Models.CoreAccountDb");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Inn")
                        .IsUnique();

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Models.PersonalAccountDb", b =>
                {
                    b.HasBaseType("Models.CoreAccountDb");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Models.RefreshTokenDb", b =>
                {
                    b.HasOne("Models.AccountDb", "Account")
                        .WithOne()
                        .HasForeignKey("Models.RefreshTokenDb", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
